(()=>{var l=class{constructor(){this.processedFiles=[],this.totalFiles=0,this.processedCount=0,this.ui=null}setUI(e){this.ui=e}async processFiles(e){this.processedFiles=[],this.totalFiles=e.length,this.processedCount=0;for(let t=0;t<e.length;t++){let s=e[t];this.ui&&this.ui.addFileItem(s,t);try{let i=await this.readFileAsDataURL(s);this.processedFiles.push({file:s,imageUrl:i,index:t}),this.ui&&this.ui.updateFileStatus(t,"File read successfully","completed"),this.processedCount++,this.updateProgress()}catch(i){throw console.error("Error reading file:",s.name,i),this.ui&&this.ui.updateFileStatus(t,"Error reading file","error"),i}}}readFileAsDataURL(e){return new Promise((t,s)=>{let i=new FileReader;i.onload=o=>t(o.target.result),i.onerror=s,i.readAsDataURL(e)})}updateProgress(){let e=document.getElementById("progressFill"),t=document.getElementById("progressText");if(e&&t){let s=this.processedCount/this.totalFiles*100;e.style.width=s+"%",t.textContent=`${this.processedCount} / ${this.totalFiles} files processed`}}getProcessedFiles(){return this.processedFiles}getProgress(){return{processedCount:this.processedCount,totalFiles:this.totalFiles}}};var d=class{constructor(){this.fileInput=document.getElementById("fileInput"),this.convertButton=document.getElementById("convertButton"),this.output=document.getElementById("output"),this.progressContainer=document.getElementById("progressContainer"),this.fileList=document.getElementById("fileList"),this.instructionsSection=document.getElementById("instructionsSection"),this.instructionsHeader=document.getElementById("instructionsHeader"),this.collapseToggle=document.getElementById("collapseToggle"),this.initializeInstructions()}initializeInstructions(){this.getVisitCount()>1&&this.collapseInstructions(),this.instructionsHeader.addEventListener("click",()=>{this.toggleInstructions()})}getVisitCount(){let e=localStorage.getItem("imageConvert_visitCount");return e?parseInt(e,10):0}incrementVisitCount(){let e=this.getVisitCount();localStorage.setItem("imageConvert_visitCount",(e+1).toString()),e===1&&this.collapseInstructions()}toggleInstructions(){this.instructionsSection.classList.contains("collapsed")?this.expandInstructions():this.collapseInstructions()}collapseInstructions(){this.instructionsSection.classList.add("collapsed")}expandInstructions(){this.instructionsSection.classList.remove("collapsed")}showProgress(){this.progressContainer.style.display="block",this.convertButton.disabled=!0}hideProgress(){this.progressContainer.style.display="none"}enableConvertButton(){this.convertButton.disabled=!1}resetFileList(){this.fileList.innerHTML=""}showError(e){this.output.innerHTML=`<h3 style="color: #f44336;">${e}</h3>`}showConvertedMessage(){this.output.innerHTML="<h3>All images have been processed</h3>"}showConvertingMessage(){this.output.innerHTML="<h3>Converting your images...</h3>"}showConversionMethodInfo(e,t){let s="";e==="webp"&&t?s=`
                <div class="conversion-info browser-info">
                    <h3>\u{1F310} Browser Conversion</h3>
                    <p>Your browser supports WebP conversion. Images will be converted locally without any server uploads.</p>
                </div>
            `:e==="webp"&&!t?s=`
                <div class="conversion-info server-info">
                    <h3>\u2601\uFE0F Server Conversion</h3>
                    <p>Your browser doesn't support WebP conversion. Images will be uploaded to our server for conversion.</p>
                </div>
            `:e==="avif"&&(s=`
                <div class="conversion-info server-info">
                    <h3>\u2601\uFE0F Server Conversion</h3>
                    <p>AVIF conversion requires server processing. Images will be uploaded to our server for conversion.</p>
                </div>
                <div class="conversion-info avif-limits">
                    <h3>\u26A0\uFE0F AVIF Processing Limits</h3>
                    <p>Due to free server limitations, AVIF conversion may fail for bigger files. For reliable conversion, use WebP format or try smaller files.</p>
                </div>
            `),this.output.innerHTML=s}hideConvertedMessage(){this.output.innerHTML=""}createFileItem(e,t){let s=document.createElement("div");return s.className="file-item",s.innerHTML=`
            <div>
                <strong>${e.name}</strong>
                <div class="file-status loading" id="status-${t}">Reading file...</div>
                <div class="file-info" id="file-info-${t}"></div>
            </div>
            <div>${(e.size/1024).toFixed(1)} KB</div>
        `,s}addFileItem(e,t){let s=this.createFileItem(e,t);this.fileList.appendChild(s)}updateFileStatus(e,t,s){let i=document.getElementById(`status-${e}`);i&&(i.textContent=t,i.className=`file-status ${s}`)}async displayConversionResult(e,t,s){let{dataUrl:i,originalSize:o,convertedSize:n,reductionPercentage:r,fileName:a,conversionMethod:c}=t,p=document.getElementById(`file-info-${e}`),m=r>0?"size-reduction":"size-increase",f=r>0?"reduced":"increased",w=s.toUpperCase();p.innerHTML=`
            Original: ${(o/1024).toFixed(1)} KB | 
            ${w}: ${(n/1024).toFixed(1)} KB | 
            <span class="${m}">${f} by ${Math.abs(r)}%</span>
        `;let C=await this.createActionLinks(i,a,s),g=document.getElementById(`status-${e}`);g.innerHTML="Converted successfully ",g.appendChild(C),g.className="file-status completed"}async createActionLinks(e,t,s){let i=document.createElement("div");i.className="action-links";let o=document.createElement("a");o.href=e,o.download=t,o.textContent=`Download ${s.toUpperCase()}`,o.className="download-link";let n=document.createElement("a"),a=await(await fetch(e)).blob(),c=URL.createObjectURL(a);return n.href=c,n.target="_blank",n.textContent=`View ${s.toUpperCase()}`,n.className="view-link",i.appendChild(o),i.appendChild(n),i}};var u=class{constructor(){this.apiEndpoint="https://central-server-app.vercel.app/api/image-convert",this.webpSupported=this.checkWebPSupport()}checkWebPSupport(){let e=document.createElement("canvas");return e.width=1,e.height=1,e.toDataURL("image/webp").indexOf("data:image/webp")===0}async convertToFormat(e,t){return t==="webp"&&this.webpSupported?await this.convertToWebPInBrowser(e):await this.convertViaServer(e,t)}async convertToWebPInBrowser(e){return new Promise((t,s)=>{let i=new Image;i.onload=()=>{try{let o=document.createElement("canvas"),n=o.getContext("2d");o.width=i.width,o.height=i.height,n.drawImage(i,0,0);let r=o.toDataURL("image/webp",.8),a=e.file.size,c=this.getDataUrlSize(r),p=Number(((a-c)/a*100).toFixed(2)),m=this.generateFileName(e.file.name,"webp");t({originalSize:a,convertedSize:c,reductionPercentage:p,dataUrl:r,format:"webp",fileName:m})}catch(o){s(o)}},i.onerror=()=>{s(new Error("Failed to load image for conversion"))},i.src=e.imageUrl})}async convertViaServer(e,t){let s=new FormData;s.append("image",e.file),s.append("format",t);try{let i=await fetch(this.apiEndpoint,{method:"POST",body:s});if(!i.ok)throw new Error(`HTTP error! status: ${i.status}`);return(await i.json()).data}catch(i){throw console.error(`Error converting image to ${t}:`,i),i}}getDataUrlSize(e){let t=e.split(",")[1];return Math.floor(t.length*3/4)-(t.endsWith("==")?2:t.endsWith("=")?1:0)}generateFileName(e,t){return`${e.replace(/\.[^/.]+$/,"")}.${t}`}};var v=class{constructor(){this.fileProcessor=new l,this.ui=new d,this.imageConverter=new u,this.fileProcessor.setUI(this.ui),this.ui.incrementVisitCount(),this.initializeEventListeners(),this.initializeConversionInfo()}initializeEventListeners(){let e=document.getElementById("fileInput"),t=document.getElementById("convertButton");e.addEventListener("change",i=>this.handleFileSelect(i)),t.addEventListener("click",()=>this.handleConvert()),document.getElementById("formatSelect").addEventListener("change",()=>this.updateConversionInfo())}initializeConversionInfo(){this.updateConversionInfo()}updateConversionInfo(){let e=this.getSelectedFormat(),t=this.imageConverter.webpSupported;this.ui.showConversionMethodInfo(e,t)}getSelectedFormat(){return document.getElementById("formatSelect").value}async handleFileSelect(e){let t=e.target.files;if(t.length!==0){this.ui.showProgress(),this.ui.resetFileList(),this.ui.hideConvertedMessage();try{await this.fileProcessor.processFiles(t),this.ui.hideProgress(),this.ui.enableConvertButton()}catch(s){console.error("Error processing files:",s),this.ui.hideProgress(),this.ui.showError("Error processing files")}}}async handleConvert(){let e=this.fileProcessor.getProcessedFiles(),t=this.getSelectedFormat();if(e.length===0){alert("No files to convert. Please select files first.");return}this.ui.showConvertingMessage();let s,i=new Promise(n=>{s=n}),o=0;e.forEach(async n=>{try{this.ui.updateFileStatus(n.index,`Converting to ${t.toUpperCase()}...`,"loading");let r=await this.imageConverter.convertToFormat(n,t);this.ui.displayConversionResult(n.index,r,t)}catch(r){console.error("Error converting file:",n.file.name,r),this.ui.updateFileStatus(n.index,"Conversion failed","error")}finally{o++,o===e.length&&s()}}),i.then(()=>{this.ui.showConvertedMessage()})}};document.addEventListener("DOMContentLoaded",()=>{new v});})();
